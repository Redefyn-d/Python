{
  "nbformat": 4,
  "nbformat_minor": 0,
  "metadata": {
    "colab": {
      "provenance": [],
      "authorship_tag": "ABX9TyNLmVE+4Ub9NEWyG20Q5YSs",
      "include_colab_link": true
    },
    "kernelspec": {
      "name": "python3",
      "display_name": "Python 3"
    },
    "language_info": {
      "name": "python"
    }
  },
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "view-in-github",
        "colab_type": "text"
      },
      "source": [
        "<a href=\"https://colab.research.google.com/github/Redefyn-d/Python/blob/main/18/05/2024%20Assignment\" target=\"_parent\"><img src=\"https://colab.research.google.com/assets/colab-badge.svg\" alt=\"Open In Colab\"/></a>"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "f8q0zvf0bfa1"
      },
      "outputs": [],
      "source": [
        "# Function to create a file with student data\n",
        "def create_result_file(file_path):\n",
        "    grade_points = {'O': 10, 'A': 9, 'B': 8, 'C': 7, 'D': 6, 'U': 0}\n",
        "\n",
        "    with open(file_path, \"w\") as fp:\n",
        "        for _ in range(30):  # Adjusted to create data for 30 students\n",
        "            name = input(\"Enter the name of the student: \")\n",
        "            reg_no = input(\"Enter register number of the student: \")\n",
        "            grades = [input(f\"Enter grade for subject {i+1}: \") for i in range(5)]\n",
        "\n",
        "            total_marks = 0\n",
        "            has_arrear = False\n",
        "            for grade in grades:\n",
        "                if grade == 'U':\n",
        "                    has_arrear = True\n",
        "                    total_marks = 0\n",
        "                    break\n",
        "                else:\n",
        "                    total_marks += grade_points[grade]\n",
        "\n",
        "            total_marks *= 4  # Considering each subject has 4 credits\n",
        "            percentage = (total_marks / 200) * 100\n",
        "\n",
        "            student_data = [name, reg_no] + grades + [str(total_marks), f\"{percentage:.2f}\"]\n",
        "            fp.write(','.join(student_data) + '\\n')\n",
        "\n",
        "# Function to read and display file content\n",
        "def read_result_file(file_path):\n",
        "    with open(file_path, \"r\") as fp:\n",
        "        content = fp.readlines()\n",
        "        for line in content:\n",
        "            print(line.strip())\n",
        "\n",
        "# Function to analyze student data\n",
        "def analyze_results(file_path):\n",
        "    grade_category = {\n",
        "        \"90 and above\": [],\n",
        "        \"80% to 89.99%\": [],\n",
        "        \"70% to 79.99%\": [],\n",
        "        \"Below 70%\": [],\n",
        "        \"Arrear\": []\n",
        "    }\n",
        "\n",
        "    with open(file_path, \"r\") as fp:\n",
        "        details = fp.readlines()\n",
        "        for line in details:\n",
        "            parts = line.strip().split(',')\n",
        "            name, reg_no = parts[0], parts[1]\n",
        "            grades = parts[2:7]\n",
        "            total_marks = int(parts[7])\n",
        "            percentage = float(parts[8])\n",
        "\n",
        "            if 'U' in grades:\n",
        "                grade_category[\"Arrear\"].append(name)\n",
        "            elif percentage >= 90:\n",
        "                grade_category[\"90 and above\"].append(name)\n",
        "            elif percentage >= 80:\n",
        "                grade_category[\"80% to 89.99%\"].append(name)\n",
        "            elif percentage >= 70:\n",
        "                grade_category[\"70% to 79.99%\"].append(name)\n",
        "            else:\n",
        "                grade_category[\"Below 70%\"].append(name)\n",
        "\n",
        "    for category, students in grade_category.items():\n",
        "        print(f\"Students {category}: {', '.join(students)}\")\n",
        "\n",
        "# File path for results\n",
        "result_file_path = \"result.txt\"\n",
        "\n",
        "# Creating the result file with student data\n",
        "create_result_file(result_file_path)\n",
        "\n",
        "# Reading and displaying the result file content\n",
        "print(\"\\nResult File Content:\")\n",
        "read_result_file(result_file_path)\n",
        "\n",
        "# Analyzing the results and displaying the analysis\n",
        "print(\"\\nAnalysis:\")\n",
        "analyze_results(result_file_path)\n"
      ]
    },
    {
      "cell_type": "code",
      "source": [],
      "metadata": {
        "id": "CmdBo6upu7My"
      },
      "execution_count": null,
      "outputs": []
    }
  ]
}