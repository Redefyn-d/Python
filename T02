{
  "nbformat": 4,
  "nbformat_minor": 0,
  "metadata": {
    "colab": {
      "provenance": [],
      "authorship_tag": "ABX9TyPVdHCofUPlR4J4jV6147wR",
      "include_colab_link": true
    },
    "kernelspec": {
      "name": "python3",
      "display_name": "Python 3"
    },
    "language_info": {
      "name": "python"
    }
  },
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "view-in-github",
        "colab_type": "text"
      },
      "source": [
        "<a href=\"https://colab.research.google.com/github/Redefyn-d/Python/blob/main/T02\" target=\"_parent\"><img src=\"https://colab.research.google.com/assets/colab-badge.svg\" alt=\"Open In Colab\"/></a>"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 1,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "Qyuilg84fTHN",
        "outputId": "4ffaf18a-867a-489f-8eba-0ee760e195c2"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Enter element1\n",
            "Enter element2\n",
            "Enter element10\n",
            "Enter element2\n",
            "Enter element3\n",
            "Enter element5\n",
            "Enter element7\n",
            "Enter element9\n",
            "Enter element11\n",
            "Enter element8\n",
            "[1, 3, 5, 7, 9, 11]\n",
            "[2, 10, 2, 8]\n",
            "[1, 9, 25, 49, 81, 121]\n",
            "[4, 100, 4, 64]\n"
          ]
        }
      ],
      "source": [
        "a=[]\n",
        "odd_lst=[]\n",
        "even_lst=[]\n",
        "odd_sqr_lst=[]\n",
        "even_sqr_lst=[]\n",
        "for i in range(10):\n",
        "    x=int(input(\"Enter element\"))\n",
        "    a.append(x)\n",
        "for i in a:\n",
        "    if(i%2==0):\n",
        "        even_lst.append(i)\n",
        "        even_sqr_lst.append(i**2)\n",
        "    else:\n",
        "        odd_lst.append(i)\n",
        "        odd_sqr_lst.append(i**2)\n",
        "print(odd_lst)\n",
        "print(even_lst)\n",
        "print(odd_sqr_lst)\n",
        "print(even_sqr_lst)\n",
        ""
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "lst=[]\n",
        "max=0\n",
        "min=100000\n",
        "for i in range(10):\n",
        "    x=int(input(\"Enter a element for list\"))\n",
        "    lst.append(x)\n",
        "    if(x>max):\n",
        "        max=x\n",
        "    elif(x<min):\n",
        "        min=x\n",
        "print(f\"max: {max} and min: {min}\")"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "LJDblpUhfrUK",
        "outputId": "88eca53e-c3ca-43f3-8e92-5fc6874e8c0d"
      },
      "execution_count": 3,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Enter a element for list10\n",
            "Enter a element for list11\n",
            "Enter a element for list2\n",
            "Enter a element for list3\n",
            "Enter a element for list6\n",
            "Enter a element for list7\n",
            "Enter a element for list8\n",
            "Enter a element for list9\n",
            "Enter a element for list0\n",
            "Enter a element for list10\n",
            "max: 11 and min: 0\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "lst=[]\n",
        "n=int(input(\"Enter the number of elements\"))\n",
        "for i in range(n):\n",
        "  x=int(input(\"Enter the element\"))\n",
        "  lst.append(x)\n",
        "for i in range(len(lst)):\n",
        "  for j in range(i+1,len(lst)):\n",
        "    if(lst[i]>=lst[j]):\n",
        "      lst[i],lst[j]=lst[j],lst[i]\n",
        "print(f\"Second largest:{lst[-2]} and second minimum:{lst[1]}\")"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "XJ6euwjuf8ln",
        "outputId": "b5c05c77-025d-40e8-e13c-ce14eeeb44fa"
      },
      "execution_count": 5,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Enter the number of elements5\n",
            "Enter the element1\n",
            "Enter the element5\n",
            "Enter the element2\n",
            "Enter the element3\n",
            "Enter the element7\n",
            "Second largest:5 and second minimum:2\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "lst=[]\n",
        "n=int(input(\"Enter the number of elements\"))\n",
        "for i in range(n):\n",
        "  x=int(input(\"Enter the element\"))\n",
        "  lst.append(x)\n",
        "for i in range(len(lst)):\n",
        "  for j in range(i+1,len(lst)):\n",
        "    if(lst[i]>=lst[j]):\n",
        "      lst[i],lst[j]=lst[j],lst[i]\n",
        "print(f\"Ascending:{lst}\\nDescending:{lst[::-1]}\")"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "Vgjf60m7hFGF",
        "outputId": "e1455486-dc75-4598-c30b-f655bfbbb80c"
      },
      "execution_count": 6,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Enter the number of elements5\n",
            "Enter the element4\n",
            "Enter the element3\n",
            "Enter the element7\n",
            "Enter the element8\n",
            "Enter the element9\n",
            "Ascending:[3, 4, 7, 8, 9]\n",
            "Descending:[9, 8, 7, 4, 3]\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "lst=[]\n",
        "n=int(input(\"Enter the number of elements\"))\n",
        "for i in range(n):\n",
        "  x=int(input(\"Enter the elements\"))\n",
        "  lst.append(x)\n",
        "p=0\n",
        "s=int(input(\"Enter the number to be found\"))\n",
        "for i in lst:\n",
        "  if(i==s):\n",
        "    print(f\"Index is: {p}\")\n",
        "    break\n",
        "  p+=1"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "nOPh3d5ZiNTT",
        "outputId": "a85471c6-7385-4591-811c-ff2ee77e9db7"
      },
      "execution_count": 8,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Enter the number of elements5\n",
            "Enter the elements1\n",
            "Enter the elements6\n",
            "Enter the elements9\n",
            "Enter the elements8\n",
            "Enter the elements10\n",
            "Enter the number to be found6\n",
            "Index is: 1\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "lst=[]\n",
        "n=int(input(\"Enter the number of elements\"))\n",
        "for i in range(n):\n",
        "  x=int(input(\"Enter the elements\"))\n",
        "  lst.append(x)\n",
        "max=0\n",
        "for i in range(len(lst)):\n",
        "  c=0\n",
        "  for j in range(i,len(lst)):\n",
        "    if(lst[i]==lst[j]):\n",
        "      c+=1\n",
        "  if(c>max):\n",
        "    max=lst[i]\n",
        "print(f\"Frequent element is: {max}\")\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "l_8DnVF4i-2C",
        "outputId": "d9c05a81-09aa-4fc5-8663-d9a50f730848"
      },
      "execution_count": 13,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Enter the number of elements10\n",
            "Enter the elements1\n",
            "Enter the elements2\n",
            "Enter the elements1\n",
            "Enter the elements1\n",
            "Enter the elements4\n",
            "Enter the elements44\n",
            "Enter the elements1\n",
            "Enter the elements2\n",
            "Enter the elements1\n",
            "Enter the elements1\n",
            "Frequent element is: 1\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "lstk=[]\n",
        "n=int(input(\"Enter the number of elements\"))\n",
        "for i in range(n):\n",
        "  x=input(\"Enter the key elements\")\n",
        "  lstk.append(x)\n",
        "lstv=[]\n",
        "for i in range(n):\n",
        "  x=int(input(\"Enter the value elements\"))\n",
        "  lstv.append(x)\n",
        "dict={}\n",
        "for i in range(len(lstk)):\n",
        "  dict[lstk[i]]=lstv[i]\n",
        "print(dict)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "eJKtxP9GkV5E",
        "outputId": "8620132d-6b77-4e4f-c072-10fdd30edb5e"
      },
      "execution_count": 18,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Enter the number of elements3\n",
            "Enter the key elementslokesh\n",
            "Enter the key elementsraghav\n",
            "Enter the key elementsbabu\n",
            "Enter the value elements10\n",
            "Enter the value elements11\n",
            "Enter the value elements12\n",
            "{'lokesh': 10, 'raghav': 11, 'babu': 12}\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "voter_list=[\"mega\",\"lokesh\",\"gautham\",\"lesanth\",\"gobi\",\"vijay\",\"tharun\",\"hardik\",\"sudharshan\",\"travis\",]\n",
        "vote_count=[0,0,0]\n",
        "candidate_list=[\"A\",\"B\",\"C\"]\n",
        "name_voter=[[],[],[]]\n",
        "for i in voter_list:\n",
        "    print(\"Enter 1 to vote for A\\nEnter 2 to vote for B\\nEnter 3 to vote for C\")\n",
        "    x=int(input(f\"{i} Enter whom you want to vote for\"))\n",
        "    if(x==1):\n",
        "        vote_count[0]+=1\n",
        "        name_voter[0].append(i)\n",
        "    elif(x==2):\n",
        "        vote_count[1]+=1\n",
        "        name_voter[1].append(i)\n",
        "    elif(x==3):\n",
        "        vote_count[2]+=1\n",
        "        name_voter[2].append(i)\n",
        "max=0\n",
        "min=1000\n",
        "for i in vote_count:\n",
        "    if i>max:\n",
        "        max=i\n",
        "        can_win=vote_count.index(i)\n",
        "if(candidate_list[can_win]==\"A\"):\n",
        "  if(vote_count[1]>vote_count[2]):\n",
        "    mid=vote_count[1]\n",
        "    can_runner=1\n",
        "  else:\n",
        "    mid=vote_count[2]\n",
        "    can_runner=2\n",
        "elif(candidate_list[can_win]==\"B\"):\n",
        "  if(vote_count[2]>vote_count[0]):\n",
        "    mid=vote_count[2]\n",
        "    can_runner=2\n",
        "  else:\n",
        "    mid=vote_count[0]\n",
        "    can_runner=0\n",
        "elif(candidate_list[can_win]==\"C\"):\n",
        "  if(vote_count[1]>vote_count[0]):\n",
        "    mid=vote_count[1]\n",
        "    can_runner=1\n",
        "  else:\n",
        "    mid=vote_count[0]\n",
        "    can_runner=0\n",
        "print(f\"The winner is {candidate_list[can_win]},won with {max} votes\")\n",
        "print(\"Voter for the winner are\")\n",
        "for i in name_voter[can_win]:\n",
        "    print(i)\n",
        "print(f\"The runner is {candidate_list[can_runner]},won with {mid} votes\")\n",
        "for i in name_voter[can_runner]:\n",
        "    print(i)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "-Y0HbDjBmHhN",
        "outputId": "c5ef3f6a-4f42-4f80-b612-b0fa86ea0c56"
      },
      "execution_count": 21,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Enter 1 to vote for A\n",
            "Enter 2 to vote for B\n",
            "Enter 3 to vote for C\n",
            "mega Enter whom you want to vote for1\n",
            "Enter 1 to vote for A\n",
            "Enter 2 to vote for B\n",
            "Enter 3 to vote for C\n",
            "lokesh Enter whom you want to vote for1\n",
            "Enter 1 to vote for A\n",
            "Enter 2 to vote for B\n",
            "Enter 3 to vote for C\n",
            "gautham Enter whom you want to vote for1\n",
            "Enter 1 to vote for A\n",
            "Enter 2 to vote for B\n",
            "Enter 3 to vote for C\n",
            "lesanth Enter whom you want to vote for2\n",
            "Enter 1 to vote for A\n",
            "Enter 2 to vote for B\n",
            "Enter 3 to vote for C\n",
            "gobi Enter whom you want to vote for3\n",
            "Enter 1 to vote for A\n",
            "Enter 2 to vote for B\n",
            "Enter 3 to vote for C\n",
            "vijay Enter whom you want to vote for3\n",
            "Enter 1 to vote for A\n",
            "Enter 2 to vote for B\n",
            "Enter 3 to vote for C\n",
            "tharun Enter whom you want to vote for3\n",
            "Enter 1 to vote for A\n",
            "Enter 2 to vote for B\n",
            "Enter 3 to vote for C\n",
            "hardik Enter whom you want to vote for3\n",
            "Enter 1 to vote for A\n",
            "Enter 2 to vote for B\n",
            "Enter 3 to vote for C\n",
            "sudharshan Enter whom you want to vote for3\n",
            "Enter 1 to vote for A\n",
            "Enter 2 to vote for B\n",
            "Enter 3 to vote for C\n",
            "travis Enter whom you want to vote for3\n",
            "The winner is C,won with 6 votes\n",
            "Voter for the winner are\n",
            "gobi\n",
            "vijay\n",
            "tharun\n",
            "hardik\n",
            "sudharshan\n",
            "travis\n",
            "The runner is A,won with 3 votes\n",
            "mega\n",
            "lokesh\n",
            "gautham\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "def currency_conversion(m):\n",
        "  print(f\"Money in Dollars:{m*80}\")\n",
        "def temp(c):\n",
        "  print(f\"Fahrenheit:{((9//5)*c)+35}\")\n",
        "def bmi(w,h):\n",
        "  print(f\"BMI:{w/h}\")\n",
        "def simple_interest(r,p,t):\n",
        "  print(f\"Simple interest {(p*r*t)/100}\")\n",
        "print(\"Enter\\n1.ruppe to dollar\\n2.Celcius to Fahrenheit\\n3.BMI\\n4.Simple interest\")\n",
        "x=int(input())\n",
        "match x:\n",
        "  case 1:\n",
        "    m=int(input(\"Enter the currency\"))\n",
        "    currency_conversion(m)\n",
        "  case 2:\n",
        "    c=int(input(\"Enter the Temprature in Celcius\"))\n",
        "    temp(c)\n",
        "  case 3:\n",
        "    w=float(input(\"Enter the weight\"))\n",
        "    h=float(input(\"Enter the height\"))\n",
        "    bmi(w,h)\n",
        "  case 4:\n",
        "    p=float(input(\"Enter the principle value\"))\n",
        "    r=float(input(\"Enter the rate\"))\n",
        "    t=int(input(\"Enter the time\"))\n",
        "    simple_interest(r,p,t)\n",
        "\n",
        ""
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "fEGXA4a9p8S-",
        "outputId": "c4574b24-4054-49cb-960c-8328c95fedaf"
      },
      "execution_count": 22,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Enter\n",
            "1.ruppe to dollar\n",
            "2.Celcius to Fahrenheit\n",
            "3.BMI\n",
            "4.Simple interest\n",
            "1\n",
            "Enter the currency1000\n",
            "Money in Dollars:80000\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "lst=[]\n",
        "n=int(input(\"Enter the number of elements\"))\n",
        "for i in range(n):\n",
        "  x=int(input(\"Enter the element\"))\n",
        "  lst.append(x)\n",
        "for i in range(len(lst)):\n",
        "  for j in range(i+1,len(lst)):\n",
        "    if(lst[i]>=lst[j]):\n",
        "      lst[i],lst[j]=lst[j],lst[i]\n",
        "print(lst)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "gz1rV2-is9d2",
        "outputId": "814b9041-f9c5-4280-94c2-9c45b5e61018"
      },
      "execution_count": 24,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Enter the number of elements8\n",
            "Enter the element0\n",
            "Enter the element1\n",
            "Enter the element0\n",
            "Enter the element1\n",
            "Enter the element0\n",
            "Enter the element0\n",
            "Enter the element1\n",
            "Enter the element0\n",
            "[0, 0, 0, 0, 0, 1, 1, 1]\n"
          ]
        }
      ]
    }
  ]
}